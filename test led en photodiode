# -*- coding: utf-8 -*-
"""
Created on Mon Aug  3 12:37:35 2020

@author: M.W.Docter
"""
# upload StandardFirmata to arduino to control via python
import pyfirmata
import time
import matplotlib.pyplot as plt
import numpy as np
plt.close('all')
arduino = pyfirmata.ArduinoNano('COM')     # enter correct COM number
time.sleep(1)

# start iterator to receive input data
it = pyfirmata.util.Iterator(arduino)        
it.start()

# make arrays for measurements 
num = 500                # number of measurements
reading0 = np.zeros((num,3))        # array Digtial_in reading
reading1 = np.zeros((num,3))        # array Vout reading
t = np.zeros((num,1))

# connect RGB leds to arduino output pins
supplyRED = arduino.get_pin('d:10:o')    # red led
supplyBLUE = arduino.get_pin('d:9:o')    # blue led
supplyGREEN= arduino.get_pin('d:8:o')    # green led

# connect arduino inputs pins go measure Vout and Digital_in
ai0 = arduino.get_pin('a:0:i')        # Digital_in
ai1 = arduino.get_pin('a:1:i')        # Vout

time.sleep(0.1)         # hold up! Wait a minute

small_delay=0.001         # brief wait time so that program can execute
long_delay=0.001        # longer wait time to wait, how often a measurement is taken. 
ii_switch_nb=num/2         # determines when to switch the LED on or off

# start measuring
start = time.time()        # take note of starting time measurements 
for jj in range(3):             # for each of the colours do the measurement
    if jj==0:       supply=supplyBLUE        # first for blue
    elif jj==1:     supply=supplyGREEN    # then for green
    elif jj==2:     supply=supplyRED        # then for red
    supply.write(0)            # close led
    signal=0
    for ii in range(num):            # do actual measurements 
        reading0[ii,jj] = ai0.read()    # measure digital_in
        time.sleep(small_delay)        # brief wait time so that program can execute
        reading1[ii,jj] = ai1.read()    # measure Vout
        t[ii] = time.time()-start        # time current measurement 
        time.sleep(long_delay)        # time between measurements
        if ii%ii_switch_nb==1:            # After 1st measurement and halfway
            signal=not(signal)        # Makes signal opposite
            supply.write(signal)        # Switch led on/off
            time.sleep(small_delay)    # stop! Wait a minute
    supply.write(0)             # Turn Led off
    time.sleep(small_delay)

    #make the plot
    plt.figure(2), plt.subplot(1,3,jj+1)
    plt.plot(t,reading0[:,jj],'r-+', t,reading1[:,jj], 'b-x')
    plt.ylabel('signal')
    plt.xlabel('time [sec]')
    if jj==0: plt.title('BLUE')
    elif jj==1: plt.title('GREEN')
    elif jj==2: plt.title('RED')
    plt.show()
    MM=np.mean(reading0[reading0[:,jj]>np.mean(reading0[:,jj]),jj])
    print(jj,MM)

    # save in the loop, such that the data is still saved even with a premature ending
    np.savez(r'C:\Users\Public\data.npz', reading0,reading1)


arduino.sp.close()
