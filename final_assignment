# upload StandardFirmata to arduino to control via phyton

# Prepare things needed for buttons to work
import tkinter as tk       # https://www.element14.com/community/message/207824/l/re-how-to-break-out-of-a-while-true-loop-with-a-button
import threading    
flag_running = False       # Initlize variable measurement (not) running (starts as false)
flag_exiting = False       # Initlize variable stop experiment (starts as false)
root = tk.Tk()             # Enter tkinter function
global filename
filename=r'C:\Users\Public\data.npz'
import matplotlib.pyplot as plt
plt.close('all')           # Close previous plots to avoid crashing kernel
    
    
# Acquisition 
def measure():
    import matplotlib.pyplot as plt
    plt.close('all')
    global flag_running                           # Needs to be global variable
    global flag_exiting                           # Needs to be global variable
    global filename
    import pyfirmata
    import time
    import numpy as np
    
    # Connect to arduino
    time.sleep(1)                                 # stop, wait a minute!
    arduino = pyfirmata.ArduinoNano('COM')        # Enter correct COM       
    time.sleep(1)                                 # fill my cup, put some liquor in it
    
    # Start iterator to receive input data
    it = pyfirmata.util.Iterator(arduino)         
    it.start()
    
    # Initiate measurements arrays
    reading0 = [[0.,0.,0.]]                       # 10x gain: blue, green, red
    reading1 = [[0.,0.,0.]]                       # 100x gain: blue, green, red
    reading2 = [[0.,0.,0.]]                       # No gain: blue, green, red
    tt = [[0.,0.,0.]]                             # Time array: blue, green, red     
    
    # Connect arduino output pins to LEDs
    supplyRED = arduino.get_pin('d:10:o')         # red led
    supplyBLUE = arduino.get_pin('d:9:o')         # blue led
    supplyGREEN= arduino.get_pin('d:8:o')         # green led
    
    # Connect arduino input pins
    ai0 = arduino.get_pin('a:0:i')                # Goes into array reading0, 10x gain
    ai1 = arduino.get_pin('a:1:i')                # Goes into array reading1, 100x gain
    ai2 = arduino.get_pin('a:2:i')                # Goes into array reading2, no gain
    time.sleep(0.2)                               # take a sip, sign a check 
    
    # Connect arduino output pins to buzzer
    buzz = arduino.get_pin('d:3:o')               # buzzer
    
    # Set up time stuff
    start = time.time()                           # Start time code
    small_delay=0.1                               # Longer than 1 ms to avoid crosstalk between channels
    long_delay=1                                  # Determines how often a measurement is taken
    
    # Start actual measurement
    time.sleep(3)                                 # Wait a bit before actually measuring to reduce noise
    ii=0                                          # Measurement number
    jj_order=[0,1,2]                              
    while ( True ):                               # This loop always runs
        if (flag_running == True):                # As long as measurements are running, measure
                time.sleep(long_delay)            # julio! get the stretch!
                # Extra row added to arrays
                reading0=np.append(reading0,[[0,0,0]],axis=0)   
                reading1=np.append(reading1,[[0,0,0]],axis=0) 
                reading2=np.append(reading2,[[0,0,0]],axis=0)    
                tt= np.append(tt,[[0,0,0]],axis=0)              
                time.sleep(small_delay)           # ride to Harlem, Hollywood, Jackson, Mississippi
                # Do actual reading per colour
                for jj in range(3):
                    if jj_order[jj]==0:       supply=supplyBLUE   # First blue
                    elif jj_order[jj]==1:     supply=supplyGREEN  # Then green
                    elif jj_order[jj]==2:     supply=supplyRED    # Then red
                    supply.write(1)                               # Turn led on
                    time.sleep(small_delay)                       # if we show up, we gon'show out
                    # Measure no gain, 10x gain, 100x gain
                    reading2[ii,jj]=ai2.read()                    # Measure and save no gain
                    time.sleep(small_delay)                       # smoother than a fresh jar of Skippy
                    reading0[ii,jj]=ai0.read()                    # Measure and save 10x gain
                    time.sleep(small_delay)                       # im too hot (hot damn)
                    reading1[ii,jj]=ai1.read()                    # Measure and save 100x gain
                    time.sleep(small_delay)                       # called the police and the firemen
                    tt[ii,jj]=time.time()-start                   # Save time of measurement
                    supply.write(0)                               # Turn of led
                    time.sleep(small_delay)                       # im too hot (hot damn)
                # Print current measurements 
                print(ii,reading2[ii,:],reading0[ii,:], reading1[ii,:],tt[ii,:])       # Show measurement number + last row of each measurement array 
                # Save current measurements
                np.savez(filename, reading0,reading1,reading2, tt,jj_order,start,time.time())
                # Determine if measurement is finished
                if ((time.time()-start) > 43200):                 # Measurement has run for 12 hrs
                    buzz.write(1)                                 # Buzzer on
                    time.sleep(1)                                 # make a dragon wanna retire, man
                    buzz.write(0)                                 # Buzzer off
                    arduino.sp.close()                            # Close to free up COM
                    time.sleep(1)                                 # im too hot (hot damn)
                    kill()
                # Move on to next measurements
                ii+=1
        # Ifstopping experiment
        if (flag_exiting == True):                                # Check if ending experiment
            supply.write(0)                                       # Led off
            time.sleep(small_delay)                               # bitch, say my name you know who I am
            arduino.sp.close()                                    # Close before stopping
            return   
        time.sleep(small_delay)                                   # im too hot (hotdamn)
        
    supply.write(0)                                               # Close led
    time.sleep(small_delay)                                       # And my band 'bout that money, break it down
    arduino.sp.close()

# Define button parts
def switchon():                                                   # Button command measurements running
    global flag_running    
    flag_running = True                                                       
    print ('flag_running on'   )  
          
def switchoff():                                                  # Button command measurements not running
    global flag_running   
    flag_running = False        
    print ('flag_running off'  )  
          
def kill():                                                       # Button end experiment
    global flag_exiting     
    flag_exiting = True  
    root.destroy()      

# Apply change in button 
thread = threading.Thread(target=measure)    
thread.start()    

# Define buttons with commands
onbutton = tk.Button(root, text = "Starting ON", command = switchon)      
onbutton.pack()      
offbutton =  tk.Button(root, text = "Postponing OFF", command = switchoff)      
offbutton.pack()      
killbutton = tk.Button(root, text = "EXIT", command = kill)      
killbutton.pack()      

# Apply in mainloop
root.mainloop() 

# Part load data after ending experiment    
# Loading necessary stuff/info
import numpy as np
import matplotlib.pyplot as plt
tmp=np.load(filename)
reading0=tmp['arr_0']
reading1=tmp['arr_1']
reading2=tmp['arr_2'] 
tt=tmp['arr_3']

# Make plots
plt.figure(3)                                                     # Make subplots all colours per different gains (no,10x,100x)
plt.subplot(1,3,2)
# 10x gain, display only markers and only nonzero values
plt.plot(tt[reading0[:,0]!=np.isclose(reading0[:,0],0,1e-01),0],reading0[reading0[:,0]!=np.isclose(reading0[:,0],0,1e-01),0],'b+')
plt.plot(tt[reading0[:,1]!=np.isclose(reading0[:,1],0,1e-01),1],reading0[reading0[:,1]!=np.isclose(reading0[:,1],0,1e-01),1],'g+')
plt.plot(tt[reading0[:,2]!=np.isclose(reading0[:,2],0,1e-01),2],reading0[reading0[:,2]!=np.isclose(reading0[:,2],0,1e-01),2],'r+')
plt.title('10x gain')
plt.subplot(1,3,3)
# 100x gain, display only markers and only nonzero values
plt.plot(tt[reading1[:,0]!=np.isclose(reading1[:,0],0,1e-01),0],reading1[reading1[:,0]!=np.isclose(reading1[:,0],0,1e-01),0],'b+')
plt.plot(tt[reading1[:,1]!=np.isclose(reading1[:,1],0,1e-01),1],reading1[reading1[:,1]!=np.isclose(reading1[:,1],0,1e-01),1],'g+')
plt.plot(tt[reading1[:,2]!=np.isclose(reading1[:,2],0,1e-01),2],reading1[reading1[:,2]!=np.isclose(reading1[:,2],0,1e-01),2],'r+')
plt.title('100xgain')
plt.subplot(1,3,1)
# no gain, display only markers and only nonzero values
plt.plot(tt[reading2[:,0]!=np.isclose(reading2[:,0],0,1e-01),0],reading2[reading2[:,0]!=np.isclose(reading2[:,0],0,1e-01),0],'b+')
plt.plot(tt[reading2[:,1]!=np.isclose(reading2[:,1],0,1e-01),1],reading2[reading2[:,1]!=np.isclose(reading2[:,1],0,1e-01),1],'g+')
plt.plot(tt[reading2[:,2]!=np.isclose(reading2[:,2],0,1e-01),2],reading2[reading2[:,2]!=np.isclose(reading2[:,2],0,1e-01),2],'r+')
plt.title('no gain')
plt.ylim(0,1.1)                                                   # Y-scale starts at 0
plt.tight_layout()                                                # Makes the axis ticks readable 
plt.show()      


for jj in range(3):                                               # Make plot with all gains per colour
    plt.figure(2), plt.subplot(1,3,jj+1)     
    plt.plot(tt[reading0[:,jj]!=np.isclose(reading0[:,jj],0,1e-01),jj],reading0[reading0[:,jj]!=np.isclose(reading0[:,jj],0,1e-01),0],'b+')
    plt.plot(tt[reading1[:,jj]!=np.isclose(reading1[:,jj],0,1e-01),jj],reading1[reading1[:,jj]!=np.isclose(reading1[:,jj],0,1e-01),0],'g+')
    plt.plot(tt[reading2[:,jj]!=np.isclose(reading2[:,jj],0,1e-01),jj],reading2[reading2[:,jj]!=np.isclose(reading2[:,jj],0,1e-01),0],'r+')
    plt.ylabel('signal')
    plt.xlabel('time [sec]')
    plt.ylim(0,1.1)                                               # Y-scale starts at 0
    if jj==1: plt.title('Green')                                  
    elif jj==0: plt.title('BLUE')
    elif jj==2: plt.title('RED')

# Print average of diffent gains (no,10x,100x) per colour
print( np.round(np.mean(reading2,axis=0),3),
       np.round(np.mean(reading0,axis=0),3),
       np.round(np.mean(reading1,axis=0),3))
