# -*- coding: utf-8 -*-
"""
Created on Mon Aug  3 12:37:35 2020

@author: M.W.Docter
"""
# upload StandardFirmata to arduino to control via phyton

# button prep part
import tkinter as tk       # https://www.element14.com/community/message/207824/l/re-how-to-break-out-of-a-while-true-loop-with-a-button
import threading    
flag_running = False       # Variable measurement (not) running
flag_exiting = False       # Variable stop experiment
root = tk.Tk()             # enter tkinter function
global filename
filename=r'C:\Users\Public\data.npz'
import matplotlib.pyplot as plt
plt.close('all')           # closes previous plots to avoid kernel crashes
    
    
# Acquisition part
def measure():
    import matplotlib.pyplot as plt
    plt.close('all')
    global flag_running                           # needs to be global variable
    global flag_exiting                           # needs to be global variable
    global filename
    import pyfirmata
    import time
    import numpy as np
    
    # connect to arduino
    time.sleep(1)                                 # hold up
    arduino = pyfirmata.ArduinoNano('COM8')        # enter correct COM       
    time.sleep(1)                                 # wait a minute
    
    # start iterator to receive input data
    it = pyfirmata.util.Iterator(arduino)         
    it.start()
    
    # Initiate measurements arrays
    reading0 = [[0.,0.,0.]]                       # 5x gain: blue, green, red
    reading1 = [[0.,0.,0.]]                       # 10x gain: blue, green, red
    reading2 = [[0.,0.,0.]]                       # no gain: blue, green, red
    tt = [[0.,0.,0.]]# np.ndarray(shape=(1,3))    # time array: blue, green, red
    
    # connect arduino output pins to LEDs
    supplyRED = arduino.get_pin('d:10:o')         # red led
    supplyBLUE = arduino.get_pin('d:9:o')         # blue led
    supplyGREEN= arduino.get_pin('d:8:o')         # green led
    
    # connect arduino input pins
    ai0 = arduino.get_pin('a:0:i')                # goes into array reading0, 5x gain
    ai1 = arduino.get_pin('a:1:i')                # goes into array reading1, 10x gain
    ai2 = arduino.get_pin('a:2:i')                # goes into array reading2, no gain
    time.sleep(0.2)                               # fill my cup, put some liquor in it
    
    # connect arduino output pins to buzzer
    buzz = arduino.get_pin('d:3:o')               # buzzer
    
    # set up time stuff
    start = time.time()                           # start time code
    small_delay=0.1                               # Take a sip, sign a check              (longer than 1 ms to avoid crosstalk between channels
    long_delay=1                                  # Julio, get the stretch                (determines how often a measurement is taken)
    
    # Start actual measurement
    time.sleep(3)                                 # wait a bit before actually measuring to reduce noise
    ii=0                                          # measurement number
    jj_order=[0,1,2]                              
    while ( True ):                               # this loop always runs
        if (flag_running == True):                # as long as measurements are running, measure
                time.sleep(long_delay)            # ride to harlem, hollywood, jackson, mississipi
                # extra row added to arrays
                reading0=np.append(reading0,[[0,0,0]],axis=0)   
                reading1=np.append(reading1,[[0,0,0]],axis=0) 
                reading2=np.append(reading2,[[0,0,0]],axis=0)    
                tt= np.append(tt,[[0,0,0]],axis=0)              
                time.sleep(small_delay)           # if we show up, we gon' show out
                # Per colour do actual reading
                for jj in range(3):
                    if jj_order[jj]==0:       supply=supplyBLUE   # first blue
                    elif jj_order[jj]==1:     supply=supplyGREEN  # then green
                    elif jj_order[jj]==2:     supply=supplyRED    # then red
                    
                    #print(ii,jj,np.shape(reading0))               # show current 5x gain array dimensions
                    supply.write(1)                               # Turn led on
                    time.sleep(long_delay)                       # smoother than a fresh jar of skippy
                    
                    #measure no gain, 5x gain, 10x gain
                    reading2[ii,jj]=ai2.read()                    # measure and save no gain
                    time.sleep(small_delay)                       # im too hot (hot damn)
                    reading0[ii,jj]=ai0.read()                    # measure and save 5x gain
                    time.sleep(small_delay)                       # called the police and the firemen
                    reading1[ii,jj]=ai1.read()                    # measure and save 10x gain
                    time.sleep(small_delay)                       # im too hot (hot damn)
                    tt[ii,jj]=time.time()-start                   # save time of measurement
                    
                    supply.write(0)                               # turn of led
                    time.sleep(small_delay)                       # make a dragon wanna retire, man
                    
                # print current measurements (different methods below to test)
                print(ii,reading2[ii,:],reading0[ii,:], reading1[ii,:],tt[ii,:])       #show measurement number + last row of each measurement array , this is my preferred
                #print(ii,reading2[ii,jj],reading0[ii,jj], reading1[ii,jj],tt[ii,jj])  #show measurement number + red measurements and times
                #print(ii, reading0[ii,jj],tt[ii,jj])                                  #show measurement number + red 5x gain measurement and time      
                # save current measurements
                np.savez(filename, reading0,reading1,reading2, tt,jj_order,start,time.time())
                # determine if measurement is finished
                if ((time.time()-start) >30 ):                # measurement has run for 16 hrs
                    buzz.write(1)
                    time.sleep(1)
                    buzz.write(0)
                    kill()
                # move on to next measurements
                ii+=1
        # if stopping experiment
        if (flag_exiting == True):   # check whether to stop
            supply.write(0)          # led off
            time.sleep(small_delay)  # im too hot (hot damn hot damn)
            arduino.sp.close()       # close before stopping
            return   
        time.sleep(small_delay)      # Bithc, say my name, you know who i am
        
    supply.write(0)                  # close led
    time.sleep(small_delay)          # im too hot (hot damn)
    arduino.sp.close()

# Define button parts
def switchon():                      # buttonon command measurements are running
    global flag_running    
    flag_running = True    
    print ('flag_running on'   )  
          
def switchoff():                     # buttonon command measurements arent running
    global flag_running   
    flag_running = False        
    print ('flag_running off'  )  
          
def kill():                          # killbutton 
    global flag_exiting     
    flag_exiting = True  
    root.destroy()      

# apply change in button 
thread = threading.Thread(target=measure)    
thread.start()    

# define buttons with commands
onbutton = tk.Button(root, text = "Starting ON", command = switchon)      
onbutton.pack()      
offbutton =  tk.Button(root, text = "Postponing OFF", command = switchoff)      
offbutton.pack()      
killbutton = tk.Button(root, text = "EXIT", command = kill)      
killbutton.pack()      

# apply in mainloop
root.mainloop() 

# part load data after ending experiment    
# loading necessary stuff/info
import numpy as np
import matplotlib.pyplot as plt
tmp=np.load(filename)
reading0=tmp['arr_0']
reading1=tmp['arr_1']
reading2=tmp['arr_2']
tt=tmp['arr_3']

# Make plots
for jj in range(3):                                                 # make plot with all gains per colour
    plt.figure(2), plt.subplot(1,3,jj+1)                          
    plt.plot(tt[:-1,jj],reading0[:-1,jj],'r-+', tt[:-1,jj],reading1[:-1,jj], 'b-x', tt[:-1,jj], reading2[:-1,jj],'g-3')  
    plt.ylabel('signal')
    plt.xlabel('time [sec]')
    if jj==1: plt.title('Green')
    elif jj==0: plt.title('BLUE')
    elif jj==2: plt.title('RED')
                                                            
plt.figure(3)                                                         # make subplots all colours per different gains (no,5x,10x)
plt.subplot(1,3,2)
plt.plot(tt[:-1,0],reading0[:-1,0],'b-+', tt[:-1,1],reading0[:-1,1],'g-+', tt[:-1,2],reading0[:-1,2],'r-+')
plt.title('5x gain')
plt.subplot(1,3,3)
plt.plot(tt[:-1,0],reading1[:-1,0],'b-+', tt[:-1,1],reading1[:-1,1],'g-+', tt[:-1,2],reading1[:-1,2],'r-+')
plt.title('10xgain')
plt.subplot(1,3,1)
plt.plot(tt[:-1,0],reading2[:-1,0],'b-+', tt[:-1,1],reading2[:-1,1],'g-+', tt[:-1,2],reading2[:-1,2],'r-+')
plt.title('no gain')
plt.tight_layout()                                                    # makes the axis ticks readable
plt.show()      

# print average of diffent gains (no,5x,10x) per colour
print( np.round(np.mean(reading2,axis=0),3),
       np.round(np.mean(reading0,axis=0),3),
       np.round(np.mean(reading1,axis=0),3))
